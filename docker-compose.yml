version: "3.9"
services:
  swag:
    image: lscr.io/linuxserver/swag
    container_name: mcri-swag
    cap_add:
      - NET_ADMIN
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/London
      - URL=${URL}
      - SUBDOMAINS=wildcard
      - VALIDATION=duckdns
      - DUCKDNSTOKEN=${DUCKDNS_TOKEN}
      - CERTPROVIDER=zerossl
      - EMAIL=oliver.woolland@manchester.ac.uk
    volumes:
      - ./swag_store:/config
      - ./swag_config/default.conf:/config/nginx/site-confs/default.conf
    #restart: unless-stopped
    ports:
      - 443:443
      - 80:80 
    networks:
      mcri:
    healthcheck:
      test: ["CMD", "cat", "/etc/letsencrypt/live/${URL}/privkey.pem"]
      interval: 10s
      timeout: 10s
      retries: 20

  mcri-frontend:
    image: ghcr.io/uomresearchit/mcri-frontend
    container_name: mcri-frontend
    depends_on:
      - mcri-backend
    networks:
      mcri:

  mcri-backend:
    image: ghcr.io/uomresearchit/mcri-backend
    container_name: mcri-backend
    environment:
      - MCRI_URL=${URL}
    volumes:
      - ./swag_store/etc/letsencrypt//:/etc/letsencrypt/
    depends_on:
      swag:
        condition: service_healthy
      mongo:
        condition: service_started
      influx:
        condition: service_started
    networks:
      mcri:

  mongo:
    image: mongo:6.0.2
    container_name: mcri-mongo
    #restart: unless-stopped
    volumes:
      - ./mongorestore.sh:/docker-entrypoint-initdb.d/mongorestore.sh
      - ./mcri-seed:/mcri-seed
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASS}
      MONGO_INITDB_DATABASE: mcri
    networks:
      mcri:

  mongo-express:
    image: mongo-express
    container_name: mcri-mongo-express
    #restart: unless-stopped
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_USER}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_PASS}
      ME_CONFIG_MONGODB_URL: mongodb://${MONGO_USER}:${MONGO_PASS}@mongo:27017/
    depends_on:
      - mongo
    networks:
      mcri:
    
  influx:
    image: influxdb:1.8.10
    container_name: mcri-influx
    volumes:
      - influxdb-storage:/var/lib/influxdb
    environment:
      INFLUXDB_DB: db0
      INFLUXDB_ADMIN_USER: ${INFLUX_USER}
      INFLUXDB_ADMIN_PASSWORD: ${INFLUX_PASS}
    networks:
      mcri:
        
  chronograf:
    image: chronograf:latest
    container_name: mcri-chronograf
    volumes:
      - chronograf-storage:/var/lib/chronograf
    depends_on:
      - influx
    environment:
      - INFLUXDB_URL=http://influx:8086
      - INFLUXDB_USERNAME=${INFLUX_USER}
      - INFLUXDB_PASSWORD=${INFLUX_PASS}
    networks:
      mcri:

  # cylc:
  #   image: ghcr.io/uomresearchit/cylc:latest
  #   container_name: mcri-cylc
  #   volumes:
  #     - ./cylc-workflows:/cylc-workflows
  #   networks:
  #     mcri:

  arisense-data-collector:
    image: ghcr.io/uomresearchit/arisense_data_collector:latest
    container_name: mcri-arisense-data-collector
    environment:
      - DB_HOST=${INFLUX_HOST}
      - DB_PORT=${INFLUX_PORT}
      - DB_NAME=${INFLUX_DB_NAME}
      - DB_USER=${INFLUX_USER}
      - DB_PASS={INFLUX_PASS}
    depends_on:
      - influx
    networks:
      mcri:
    command: tail -f /dev/null
    labels:
      ofelia.enabled: "true"
      ofelia.job-exec.collect.schedule: "@every 15m"
      ofelia.job-exec.collect.command: "node arisense.js"
        
  ofelia:
    image: mcuadros/ofelia:latest
    container_name: mcri-ofelia
    depends_on:
      - influx
    command: daemon --docker
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro

  # galaxy:
  #   image: galaxy/galaxy-min:latest
  #   container_name: mcri-galaxy
  #   networks:
  #     mcri:
      
volumes:
  influxdb-storage:
  chronograf-storage:
  swag-config:
  swag-keys:

networks:
  mcri:
    driver: bridge
    ipam:
     config:
       - subnet: 172.31.6.0/24
         gateway: 172.31.6.1
